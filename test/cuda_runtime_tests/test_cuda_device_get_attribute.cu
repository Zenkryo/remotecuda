#include "common.h"

TEST_F(CudaRuntimeApiTest, CudaDeviceGetAttribute){
    int value;
    cudaError_t err;
    struct TestCase {
        cudaDeviceAttr attr;
        const char *description;
    };
    TestCase testCases[] = {{cudaDevAttrMaxThreadsPerBlock, "Max threads per block"},
                            {cudaDevAttrMaxBlockDimX, "Max block dimension X"},
                            {cudaDevAttrMaxBlockDimY, "Max block dimension Y"},
                            {cudaDevAttrMaxBlockDimZ, "Max block dimension Z"},
                            {cudaDevAttrMaxGridDimX, "Max grid dimension X"},
                            {cudaDevAttrMaxGridDimY, "Max grid dimension Y"},
                            {cudaDevAttrMaxGridDimZ, "Max grid dimension Z"},
                            {cudaDevAttrMaxSharedMemoryPerBlock, "Max shared memory per block"},
                            {cudaDevAttrTotalConstantMemory, "Total constant memory"},
                            {cudaDevAttrWarpSize, "Warp size"},
                            {cudaDevAttrMaxPitch, "Max pitch"},
                            {cudaDevAttrMaxRegistersPerBlock, "Max registers per block"},
                            {cudaDevAttrClockRate, "Clock rate"},
                            {cudaDevAttrTextureAlignment, "Texture alignment"},
                            {cudaDevAttrGpuOverlap, "GPU overlap"},
                            {cudaDevAttrMultiProcessorCount, "Multiprocessor count"},
                            {cudaDevAttrKernelExecTimeout, "Kernel execution timeout"},
                            {cudaDevAttrIntegrated, "Integrated GPU"},
                            {cudaDevAttrCanMapHostMemory, "Can map host memory"},
                            {cudaDevAttrComputeMode, "Compute mode"},
                            {cudaDevAttrMaxTexture1DWidth, "Max texture 1D width"},
                            {cudaDevAttrMaxTexture2DWidth, "Max texture 2D width"},
                            {cudaDevAttrMaxTexture2DHeight, "Max texture 2D height"},
                            {cudaDevAttrMaxTexture3DWidth, "Max texture 3D width"},
                            {cudaDevAttrMaxTexture3DHeight, "Max texture 3D height"},
                            {cudaDevAttrMaxTexture3DDepth, "Max texture 3D depth"},
                            {cudaDevAttrMaxTexture2DLayeredWidth, "Max texture 2D layered width"},
                            {cudaDevAttrMaxTexture2DLayeredHeight, "Max texture 2D layered height"},
                            {cudaDevAttrMaxTexture2DLayeredLayers, "Max texture 2D layered layers"},
                            {cudaDevAttrSurfaceAlignment, "Surface alignment"},
                            {cudaDevAttrConcurrentKernels, "Concurrent kernels"},
                            {cudaDevAttrEccEnabled, "ECC enabled"},
                            {cudaDevAttrPciBusId, "PCI bus ID"},
                            {cudaDevAttrPciDeviceId, "PCI device ID"},
                            {cudaDevAttrTccDriver, "TCC driver"},
                            {cudaDevAttrMemoryClockRate, "Memory clock rate"},
                            {cudaDevAttrGlobalMemoryBusWidth, "Global memory bus width"},
                            {cudaDevAttrL2CacheSize, "L2 cache size"},
                            {cudaDevAttrMaxThreadsPerMultiProcessor, "Max threads per multiprocessor"},
                            {cudaDevAttrAsyncEngineCount, "Async engine count"},
                            {cudaDevAttrUnifiedAddressing, "Unified addressing"},
                            {cudaDevAttrMaxTexture1DLayeredWidth, "Max texture 1D layered width"},
                            {cudaDevAttrMaxTexture1DLayeredLayers, "Max texture 1D layered layers"},
                            {cudaDevAttrMaxTexture2DGatherWidth, "Max texture 2D gather width"},
                            {cudaDevAttrMaxTexture2DGatherHeight, "Max texture 2D gather height"},
                            {cudaDevAttrMaxTexture3DWidthAlt, "Max texture 3D width alt"},
                            {cudaDevAttrMaxTexture3DHeightAlt, "Max texture 3D height alt"},
                            {cudaDevAttrMaxTexture3DDepthAlt, "Max texture 3D depth alt"},
                            {cudaDevAttrPciDomainId, "PCI domain ID"},
                            {cudaDevAttrTexturePitchAlignment, "Texture pitch alignment"},
                            {cudaDevAttrMaxTextureCubemapWidth, "Max texture cubemap width"},
                            {cudaDevAttrMaxTextureCubemapLayeredWidth, "Max texture cubemap layered width"},
                            {cudaDevAttrMaxTextureCubemapLayeredLayers, "Max texture cubemap layered layers"},
                            {cudaDevAttrMaxSurface1DWidth, "Max surface 1D width"},
                            {cudaDevAttrMaxSurface2DWidth, "Max surface 2D width"},
                            {cudaDevAttrMaxSurface2DHeight, "Max surface 2D height"},
                            {cudaDevAttrMaxSurface3DWidth, "Max surface 3D width"},
                            {cudaDevAttrMaxSurface3DHeight, "Max surface 3D height"},
                            {cudaDevAttrMaxSurface3DDepth, "Max surface 3D depth"},
                            {cudaDevAttrMaxSurface1DLayeredWidth, "Max surface 1D layered width"},
                            {cudaDevAttrMaxSurface1DLayeredLayers, "Max surface 1D layered layers"},
                            {cudaDevAttrMaxSurface2DLayeredWidth, "Max surface 2D layered width"},
                            {cudaDevAttrMaxSurface2DLayeredHeight, "Max surface 2D layered height"},
                            {cudaDevAttrMaxSurface2DLayeredLayers, "Max surface 2D layered layers"},
                            {cudaDevAttrMaxSurfaceCubemapWidth, "Max surface cubemap width"},
                            {cudaDevAttrMaxSurfaceCubemapLayeredWidth, "Max surface cubemap layered width"},
                            {cudaDevAttrMaxSurfaceCubemapLayeredLayers, "Max surface cubemap layered layers"},
                            {cudaDevAttrMaxTexture1DLinearWidth, "Max texture 1D linear width"},
                            {cudaDevAttrMaxTexture2DLinearWidth, "Max texture 2D linear width"},
                            {cudaDevAttrMaxTexture2DLinearHeight, "Max texture 2D linear height"},
                            {cudaDevAttrMaxTexture2DLinearPitch, "Max texture 2D linear pitch"},
                            {cudaDevAttrMaxTexture2DMipmappedWidth, "Max texture 2D mipmapped width"},
                            {cudaDevAttrMaxTexture2DMipmappedHeight, "Max texture 2D mipmapped height"},
                            {cudaDevAttrComputeCapabilityMajor, "Compute capability major"},
                            {cudaDevAttrComputeCapabilityMinor, "Compute capability minor"},
                            {cudaDevAttrMaxTexture1DMipmappedWidth, "Max texture 1D mipmapped width"},
                            {cudaDevAttrStreamPrioritiesSupported, "Stream priorities supported"},
                            {cudaDevAttrGlobalL1CacheSupported, "Global L1 cache supported"},
                            {cudaDevAttrLocalL1CacheSupported, "Local L1 cache supported"},
                            {cudaDevAttrMaxSharedMemoryPerMultiprocessor, "Max shared memory per multiprocessor"},
                            {cudaDevAttrMaxRegistersPerMultiprocessor, "Max registers per multiprocessor"},
                            {cudaDevAttrManagedMemory, "Managed memory"},
                            {cudaDevAttrIsMultiGpuBoard, "Is multi-GPU board"},
                            {cudaDevAttrMultiGpuBoardGroupID, "Multi-GPU board group ID"},
                            {cudaDevAttrHostNativeAtomicSupported, "Host native atomic supported"},
                            {cudaDevAttrSingleToDoublePrecisionPerfRatio, "Single to double precision performance ratio"},
                            {cudaDevAttrPageableMemoryAccess, "Pageable memory access"},
                            {cudaDevAttrConcurrentManagedAccess, "Concurrent managed access"},
                            {cudaDevAttrComputePreemptionSupported, "Compute preemption supported"},
                            {cudaDevAttrCanUseHostPointerForRegisteredMem, "Can use host pointer for registered memory"},
                            {cudaDevAttrCooperativeLaunch, "Cooperative launch"},
                            {cudaDevAttrCooperativeMultiDeviceLaunch, "Cooperative multi-device launch"},
                            {cudaDevAttrMaxSharedMemoryPerBlockOptin, "Max shared memory per block opt-in"},
                            {cudaDevAttrCanFlushRemoteWrites, "Can flush remote writes"},
                            {cudaDevAttrHostRegisterSupported, "Host register supported"},
                            {cudaDevAttrPageableMemoryAccessUsesHostPageTables, "Pageable memory access uses host page tables"},
                            {cudaDevAttrDirectManagedMemAccessFromHost, "Direct managed memory access from host"},
                            {cudaDevAttrMaxBlocksPerMultiprocessor, "Max blocks per multiprocessor"},
                            {cudaDevAttrMaxPersistingL2CacheSize, "Max persisting L2 cache size"},
                            {cudaDevAttrMaxAccessPolicyWindowSize, "Max access policy window size"},
                            {cudaDevAttrReservedSharedMemoryPerBlock, "Reserved shared memory per block"},
                            {cudaDevAttrSparseCudaArraySupported, "Sparse CUDA array supported"},
                            {cudaDevAttrHostRegisterReadOnlySupported, "Host register read-only supported"},
                            {cudaDevAttrMemoryPoolsSupported, "Memory pools supported"},
                            {cudaDevAttrGPUDirectRDMASupported, "GPU Direct RDMA supported"},
                            {cudaDevAttrGPUDirectRDMAFlushWritesOptions, "GPU Direct RDMA flush writes options"},
                            {cudaDevAttrGPUDirectRDMAWritesOrdering, "GPU Direct RDMA writes ordering"},
                            {cudaDevAttrMemoryPoolSupportedHandleTypes, "Memory pool supported handle types"}};
    for(const auto &testCase : testCases) {
        err = cudaDeviceGetAttribute(&value, testCase.attr, 0);
        if(err != cudaErrorInvalidValue) { // Skip unsupported attributes
            CHECK_CUDA_ERROR(err, (std::string("Failed to get ") + testCase.description).c_str());
        }
    }
}
