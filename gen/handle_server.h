#ifndef HOOK_SERVER_H
#define HOOK_SERVER_H

#include <cstdint>

#include "../server.h"

int handle___cudaInitModule(void *args);
int handle___cudaPushCallConfiguration(void *args);
int handle___cudaPopCallConfiguration(void *args);
int handle___cudaRegisterFatBinary(void *args);
int handle___cudaRegisterFatBinaryEnd(void *args);
int handle___cudaUnregisterFatBinary(void *args);
int handle___cudaRegisterVar(void *args);
int handle___cudaRegisterManagedVar(void *args);
int handle___cudaRegisterFunction(void *args);
int handle_mem2server(void *args);
int handle_mem2client(void *args);
int handle_cuGetErrorString(void *args);
int handle_cuGetErrorName(void *args);
int handle_cuInit(void *args);
int handle_cuDriverGetVersion(void *args);
int handle_cuDeviceGet(void *args);
int handle_cuDeviceGetCount(void *args);
int handle_cuDeviceGetName(void *args);
int handle_cuDeviceGetUuid(void *args);
int handle_cuDeviceGetUuid_v2(void *args);
int handle_cuDeviceGetLuid(void *args);
int handle_cuDeviceTotalMem_v2(void *args);
int handle_cuDeviceGetTexture1DLinearMaxWidth(void *args);
int handle_cuDeviceGetAttribute(void *args);
int handle_cuDeviceGetNvSciSyncAttributes(void *args);
int handle_cuDeviceSetMemPool(void *args);
int handle_cuDeviceGetMemPool(void *args);
int handle_cuDeviceGetDefaultMemPool(void *args);
int handle_cuDeviceGetProperties(void *args);
int handle_cuDeviceComputeCapability(void *args);
int handle_cuDevicePrimaryCtxRetain(void *args);
int handle_cuDevicePrimaryCtxRelease_v2(void *args);
int handle_cuDevicePrimaryCtxSetFlags_v2(void *args);
int handle_cuDevicePrimaryCtxGetState(void *args);
int handle_cuDevicePrimaryCtxReset_v2(void *args);
int handle_cuDeviceGetExecAffinitySupport(void *args);
int handle_cuCtxCreate_v2(void *args);
int handle_cuCtxCreate_v3(void *args);
int handle_cuCtxDestroy_v2(void *args);
int handle_cuCtxPushCurrent_v2(void *args);
int handle_cuCtxPopCurrent_v2(void *args);
int handle_cuCtxSetCurrent(void *args);
int handle_cuCtxGetCurrent(void *args);
int handle_cuCtxGetDevice(void *args);
int handle_cuCtxGetFlags(void *args);
int handle_cuCtxSynchronize(void *args);
int handle_cuCtxSetLimit(void *args);
int handle_cuCtxGetLimit(void *args);
int handle_cuCtxGetCacheConfig(void *args);
int handle_cuCtxSetCacheConfig(void *args);
int handle_cuCtxGetSharedMemConfig(void *args);
int handle_cuCtxSetSharedMemConfig(void *args);
int handle_cuCtxGetApiVersion(void *args);
int handle_cuCtxGetStreamPriorityRange(void *args);
int handle_cuCtxResetPersistingL2Cache(void *args);
int handle_cuCtxGetExecAffinity(void *args);
int handle_cuCtxAttach(void *args);
int handle_cuCtxDetach(void *args);
int handle_cuModuleLoad(void *args);
int handle_cuModuleLoadData(void *args);
int handle_cuModuleLoadDataEx(void *args);
int handle_cuModuleLoadFatBinary(void *args);
int handle_cuModuleUnload(void *args);
int handle_cuModuleGetFunction(void *args);
int handle_cuModuleGetGlobal_v2(void *args);
int handle_cuModuleGetTexRef(void *args);
int handle_cuModuleGetSurfRef(void *args);
int handle_cuLinkCreate_v2(void *args);
int handle_cuLinkAddData_v2(void *args);
int handle_cuLinkAddFile_v2(void *args);
int handle_cuLinkComplete(void *args);
int handle_cuLinkDestroy(void *args);
int handle_cuMemGetInfo_v2(void *args);
int handle_cuMemAlloc_v2(void *args);
int handle_cuMemAllocPitch_v2(void *args);
int handle_cuMemFree_v2(void *args);
int handle_cuMemGetAddressRange_v2(void *args);
int handle_cuMemAllocHost_v2(void *args);
int handle_cuMemFreeHost(void *args);
int handle_cuMemHostAlloc(void *args);
int handle_cuMemHostGetDevicePointer_v2(void *args);
int handle_cuMemHostGetFlags(void *args);
int handle_cuMemAllocManaged(void *args);
int handle_cuDeviceGetByPCIBusId(void *args);
int handle_cuDeviceGetPCIBusId(void *args);
int handle_cuIpcGetEventHandle(void *args);
int handle_cuIpcOpenEventHandle(void *args);
int handle_cuIpcGetMemHandle(void *args);
int handle_cuIpcOpenMemHandle_v2(void *args);
int handle_cuIpcCloseMemHandle(void *args);
int handle_cuMemHostRegister_v2(void *args);
int handle_cuMemHostUnregister(void *args);
int handle_cuMemcpy(void *args);
int handle_cuMemcpyPeer(void *args);
int handle_cuMemcpyHtoD_v2(void *args);
int handle_cuMemcpyDtoH_v2(void *args);
int handle_cuMemcpyDtoD_v2(void *args);
int handle_cuMemcpyDtoA_v2(void *args);
int handle_cuMemcpyAtoD_v2(void *args);
int handle_cuMemcpyHtoA_v2(void *args);
int handle_cuMemcpyAtoH_v2(void *args);
int handle_cuMemcpyAtoA_v2(void *args);
int handle_cuMemcpy2D_v2(void *args);
int handle_cuMemcpy2DUnaligned_v2(void *args);
int handle_cuMemcpy3D_v2(void *args);
int handle_cuMemcpy3DPeer(void *args);
int handle_cuMemcpyAsync(void *args);
int handle_cuMemcpyPeerAsync(void *args);
int handle_cuMemcpyHtoDAsync_v2(void *args);
int handle_cuMemcpyDtoHAsync_v2(void *args);
int handle_cuMemcpyDtoDAsync_v2(void *args);
int handle_cuMemcpyHtoAAsync_v2(void *args);
int handle_cuMemcpyAtoHAsync_v2(void *args);
int handle_cuMemcpy2DAsync_v2(void *args);
int handle_cuMemcpy3DAsync_v2(void *args);
int handle_cuMemcpy3DPeerAsync(void *args);
int handle_cuMemsetD8_v2(void *args);
int handle_cuMemsetD16_v2(void *args);
int handle_cuMemsetD32_v2(void *args);
int handle_cuMemsetD2D8_v2(void *args);
int handle_cuMemsetD2D16_v2(void *args);
int handle_cuMemsetD2D32_v2(void *args);
int handle_cuMemsetD8Async(void *args);
int handle_cuMemsetD16Async(void *args);
int handle_cuMemsetD32Async(void *args);
int handle_cuMemsetD2D8Async(void *args);
int handle_cuMemsetD2D16Async(void *args);
int handle_cuMemsetD2D32Async(void *args);
int handle_cuArrayCreate_v2(void *args);
int handle_cuArrayGetDescriptor_v2(void *args);
int handle_cuArrayGetSparseProperties(void *args);
int handle_cuMipmappedArrayGetSparseProperties(void *args);
int handle_cuArrayGetPlane(void *args);
int handle_cuArrayDestroy(void *args);
int handle_cuArray3DCreate_v2(void *args);
int handle_cuArray3DGetDescriptor_v2(void *args);
int handle_cuMipmappedArrayCreate(void *args);
int handle_cuMipmappedArrayGetLevel(void *args);
int handle_cuMipmappedArrayDestroy(void *args);
int handle_cuMemAddressReserve(void *args);
int handle_cuMemAddressFree(void *args);
int handle_cuMemCreate(void *args);
int handle_cuMemRelease(void *args);
int handle_cuMemMap(void *args);
int handle_cuMemMapArrayAsync(void *args);
int handle_cuMemUnmap(void *args);
int handle_cuMemSetAccess(void *args);
int handle_cuMemGetAccess(void *args);
int handle_cuMemExportToShareableHandle(void *args);
int handle_cuMemImportFromShareableHandle(void *args);
int handle_cuMemGetAllocationGranularity(void *args);
int handle_cuMemGetAllocationPropertiesFromHandle(void *args);
int handle_cuMemRetainAllocationHandle(void *args);
int handle_cuMemFreeAsync(void *args);
int handle_cuMemAllocAsync(void *args);
int handle_cuMemPoolTrimTo(void *args);
int handle_cuMemPoolSetAttribute(void *args);
int handle_cuMemPoolGetAttribute(void *args);
int handle_cuMemPoolSetAccess(void *args);
int handle_cuMemPoolGetAccess(void *args);
int handle_cuMemPoolCreate(void *args);
int handle_cuMemPoolDestroy(void *args);
int handle_cuMemAllocFromPoolAsync(void *args);
int handle_cuMemPoolExportToShareableHandle(void *args);
int handle_cuMemPoolImportFromShareableHandle(void *args);
int handle_cuMemPoolExportPointer(void *args);
int handle_cuMemPoolImportPointer(void *args);
int handle_cuPointerGetAttribute(void *args);
int handle_cuMemPrefetchAsync(void *args);
int handle_cuMemAdvise(void *args);
int handle_cuMemRangeGetAttribute(void *args);
int handle_cuMemRangeGetAttributes(void *args);
int handle_cuPointerSetAttribute(void *args);
int handle_cuPointerGetAttributes(void *args);
int handle_cuStreamCreate(void *args);
int handle_cuStreamCreateWithPriority(void *args);
int handle_cuStreamGetPriority(void *args);
int handle_cuStreamGetFlags(void *args);
int handle_cuStreamGetCtx(void *args);
int handle_cuStreamWaitEvent(void *args);
int handle_cuStreamAddCallback(void *args);
int handle_cuStreamBeginCapture_v2(void *args);
int handle_cuThreadExchangeStreamCaptureMode(void *args);
int handle_cuStreamEndCapture(void *args);
int handle_cuStreamIsCapturing(void *args);
int handle_cuStreamGetCaptureInfo(void *args);
int handle_cuStreamGetCaptureInfo_v2(void *args);
int handle_cuStreamUpdateCaptureDependencies(void *args);
int handle_cuStreamAttachMemAsync(void *args);
int handle_cuStreamQuery(void *args);
int handle_cuStreamSynchronize(void *args);
int handle_cuStreamDestroy_v2(void *args);
int handle_cuStreamCopyAttributes(void *args);
int handle_cuStreamGetAttribute(void *args);
int handle_cuStreamSetAttribute(void *args);
int handle_cuEventCreate(void *args);
int handle_cuEventRecord(void *args);
int handle_cuEventRecordWithFlags(void *args);
int handle_cuEventQuery(void *args);
int handle_cuEventSynchronize(void *args);
int handle_cuEventDestroy_v2(void *args);
int handle_cuEventElapsedTime(void *args);
int handle_cuImportExternalMemory(void *args);
int handle_cuExternalMemoryGetMappedBuffer(void *args);
int handle_cuExternalMemoryGetMappedMipmappedArray(void *args);
int handle_cuDestroyExternalMemory(void *args);
int handle_cuImportExternalSemaphore(void *args);
int handle_cuSignalExternalSemaphoresAsync(void *args);
int handle_cuWaitExternalSemaphoresAsync(void *args);
int handle_cuDestroyExternalSemaphore(void *args);
int handle_cuStreamWaitValue32(void *args);
int handle_cuStreamWaitValue64(void *args);
int handle_cuStreamWriteValue32(void *args);
int handle_cuStreamWriteValue64(void *args);
int handle_cuStreamBatchMemOp(void *args);
int handle_cuFuncGetAttribute(void *args);
int handle_cuFuncSetAttribute(void *args);
int handle_cuFuncSetCacheConfig(void *args);
int handle_cuFuncSetSharedMemConfig(void *args);
int handle_cuFuncGetModule(void *args);
int handle_cuLaunchKernel(void *args);
int handle_cuLaunchCooperativeKernel(void *args);
int handle_cuLaunchCooperativeKernelMultiDevice(void *args);
int handle_cuLaunchHostFunc(void *args);
int handle_cuFuncSetBlockShape(void *args);
int handle_cuFuncSetSharedSize(void *args);
int handle_cuParamSetSize(void *args);
int handle_cuParamSeti(void *args);
int handle_cuParamSetf(void *args);
int handle_cuParamSetv(void *args);
int handle_cuLaunch(void *args);
int handle_cuLaunchGrid(void *args);
int handle_cuLaunchGridAsync(void *args);
int handle_cuParamSetTexRef(void *args);
int handle_cuGraphCreate(void *args);
int handle_cuGraphAddKernelNode(void *args);
int handle_cuGraphKernelNodeGetParams(void *args);
int handle_cuGraphKernelNodeSetParams(void *args);
int handle_cuGraphAddMemcpyNode(void *args);
int handle_cuGraphMemcpyNodeGetParams(void *args);
int handle_cuGraphMemcpyNodeSetParams(void *args);
int handle_cuGraphAddMemsetNode(void *args);
int handle_cuGraphMemsetNodeGetParams(void *args);
int handle_cuGraphMemsetNodeSetParams(void *args);
int handle_cuGraphAddHostNode(void *args);
int handle_cuGraphHostNodeGetParams(void *args);
int handle_cuGraphHostNodeSetParams(void *args);
int handle_cuGraphAddChildGraphNode(void *args);
int handle_cuGraphChildGraphNodeGetGraph(void *args);
int handle_cuGraphAddEmptyNode(void *args);
int handle_cuGraphAddEventRecordNode(void *args);
int handle_cuGraphEventRecordNodeGetEvent(void *args);
int handle_cuGraphEventRecordNodeSetEvent(void *args);
int handle_cuGraphAddEventWaitNode(void *args);
int handle_cuGraphEventWaitNodeGetEvent(void *args);
int handle_cuGraphEventWaitNodeSetEvent(void *args);
int handle_cuGraphAddExternalSemaphoresSignalNode(void *args);
int handle_cuGraphExternalSemaphoresSignalNodeGetParams(void *args);
int handle_cuGraphExternalSemaphoresSignalNodeSetParams(void *args);
int handle_cuGraphAddExternalSemaphoresWaitNode(void *args);
int handle_cuGraphExternalSemaphoresWaitNodeGetParams(void *args);
int handle_cuGraphExternalSemaphoresWaitNodeSetParams(void *args);
int handle_cuGraphAddMemAllocNode(void *args);
int handle_cuGraphMemAllocNodeGetParams(void *args);
int handle_cuGraphAddMemFreeNode(void *args);
int handle_cuGraphMemFreeNodeGetParams(void *args);
int handle_cuDeviceGraphMemTrim(void *args);
int handle_cuDeviceGetGraphMemAttribute(void *args);
int handle_cuDeviceSetGraphMemAttribute(void *args);
int handle_cuGraphClone(void *args);
int handle_cuGraphNodeFindInClone(void *args);
int handle_cuGraphNodeGetType(void *args);
int handle_cuGraphGetNodes(void *args);
int handle_cuGraphGetRootNodes(void *args);
int handle_cuGraphGetEdges(void *args);
int handle_cuGraphNodeGetDependencies(void *args);
int handle_cuGraphNodeGetDependentNodes(void *args);
int handle_cuGraphAddDependencies(void *args);
int handle_cuGraphRemoveDependencies(void *args);
int handle_cuGraphDestroyNode(void *args);
int handle_cuGraphInstantiate_v2(void *args);
int handle_cuGraphInstantiateWithFlags(void *args);
int handle_cuGraphExecKernelNodeSetParams(void *args);
int handle_cuGraphExecMemcpyNodeSetParams(void *args);
int handle_cuGraphExecMemsetNodeSetParams(void *args);
int handle_cuGraphExecHostNodeSetParams(void *args);
int handle_cuGraphExecChildGraphNodeSetParams(void *args);
int handle_cuGraphExecEventRecordNodeSetEvent(void *args);
int handle_cuGraphExecEventWaitNodeSetEvent(void *args);
int handle_cuGraphExecExternalSemaphoresSignalNodeSetParams(void *args);
int handle_cuGraphExecExternalSemaphoresWaitNodeSetParams(void *args);
int handle_cuGraphUpload(void *args);
int handle_cuGraphLaunch(void *args);
int handle_cuGraphExecDestroy(void *args);
int handle_cuGraphDestroy(void *args);
int handle_cuGraphExecUpdate(void *args);
int handle_cuGraphKernelNodeCopyAttributes(void *args);
int handle_cuGraphKernelNodeGetAttribute(void *args);
int handle_cuGraphKernelNodeSetAttribute(void *args);
int handle_cuGraphDebugDotPrint(void *args);
int handle_cuUserObjectCreate(void *args);
int handle_cuUserObjectRetain(void *args);
int handle_cuUserObjectRelease(void *args);
int handle_cuGraphRetainUserObject(void *args);
int handle_cuGraphReleaseUserObject(void *args);
int handle_cuOccupancyMaxActiveBlocksPerMultiprocessor(void *args);
int handle_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(void *args);
int handle_cuOccupancyMaxPotentialBlockSize(void *args);
int handle_cuOccupancyMaxPotentialBlockSizeWithFlags(void *args);
int handle_cuOccupancyAvailableDynamicSMemPerBlock(void *args);
int handle_cuTexRefSetArray(void *args);
int handle_cuTexRefSetMipmappedArray(void *args);
int handle_cuTexRefSetAddress_v2(void *args);
int handle_cuTexRefSetAddress2D_v3(void *args);
int handle_cuTexRefSetFormat(void *args);
int handle_cuTexRefSetAddressMode(void *args);
int handle_cuTexRefSetFilterMode(void *args);
int handle_cuTexRefSetMipmapFilterMode(void *args);
int handle_cuTexRefSetMipmapLevelBias(void *args);
int handle_cuTexRefSetMipmapLevelClamp(void *args);
int handle_cuTexRefSetMaxAnisotropy(void *args);
int handle_cuTexRefSetBorderColor(void *args);
int handle_cuTexRefSetFlags(void *args);
int handle_cuTexRefGetAddress_v2(void *args);
int handle_cuTexRefGetArray(void *args);
int handle_cuTexRefGetMipmappedArray(void *args);
int handle_cuTexRefGetAddressMode(void *args);
int handle_cuTexRefGetFilterMode(void *args);
int handle_cuTexRefGetFormat(void *args);
int handle_cuTexRefGetMipmapFilterMode(void *args);
int handle_cuTexRefGetMipmapLevelBias(void *args);
int handle_cuTexRefGetMipmapLevelClamp(void *args);
int handle_cuTexRefGetMaxAnisotropy(void *args);
int handle_cuTexRefGetBorderColor(void *args);
int handle_cuTexRefGetFlags(void *args);
int handle_cuTexRefCreate(void *args);
int handle_cuTexRefDestroy(void *args);
int handle_cuSurfRefSetArray(void *args);
int handle_cuSurfRefGetArray(void *args);
int handle_cuTexObjectCreate(void *args);
int handle_cuTexObjectDestroy(void *args);
int handle_cuTexObjectGetResourceDesc(void *args);
int handle_cuTexObjectGetTextureDesc(void *args);
int handle_cuTexObjectGetResourceViewDesc(void *args);
int handle_cuSurfObjectCreate(void *args);
int handle_cuSurfObjectDestroy(void *args);
int handle_cuSurfObjectGetResourceDesc(void *args);
int handle_cuDeviceCanAccessPeer(void *args);
int handle_cuCtxEnablePeerAccess(void *args);
int handle_cuCtxDisablePeerAccess(void *args);
int handle_cuDeviceGetP2PAttribute(void *args);
int handle_cuGraphicsUnregisterResource(void *args);
int handle_cuGraphicsSubResourceGetMappedArray(void *args);
int handle_cuGraphicsResourceGetMappedMipmappedArray(void *args);
int handle_cuGraphicsResourceGetMappedPointer_v2(void *args);
int handle_cuGraphicsResourceSetMapFlags_v2(void *args);
int handle_cuGraphicsMapResources(void *args);
int handle_cuGraphicsUnmapResources(void *args);
int handle_cuGetProcAddress(void *args);
int handle_cuGetExportTable(void *args);
int handle_cuFlushGPUDirectRDMAWrites(void *args);
int handle_nvmlInit_v2(void *args);
int handle_nvmlInitWithFlags(void *args);
int handle_nvmlShutdown(void *args);
int handle_nvmlErrorString(void *args);
int handle_nvmlSystemGetDriverVersion(void *args);
int handle_nvmlSystemGetNVMLVersion(void *args);
int handle_nvmlSystemGetCudaDriverVersion(void *args);
int handle_nvmlSystemGetCudaDriverVersion_v2(void *args);
int handle_nvmlSystemGetProcessName(void *args);
int handle_nvmlUnitGetCount(void *args);
int handle_nvmlUnitGetHandleByIndex(void *args);
int handle_nvmlUnitGetUnitInfo(void *args);
int handle_nvmlUnitGetLedState(void *args);
int handle_nvmlUnitGetPsuInfo(void *args);
int handle_nvmlUnitGetTemperature(void *args);
int handle_nvmlUnitGetFanSpeedInfo(void *args);
int handle_nvmlUnitGetDevices(void *args);
int handle_nvmlSystemGetHicVersion(void *args);
int handle_nvmlDeviceGetCount_v2(void *args);
int handle_nvmlDeviceGetAttributes_v2(void *args);
int handle_nvmlDeviceGetHandleByIndex_v2(void *args);
int handle_nvmlDeviceGetHandleBySerial(void *args);
int handle_nvmlDeviceGetHandleByUUID(void *args);
int handle_nvmlDeviceGetHandleByPciBusId_v2(void *args);
int handle_nvmlDeviceGetName(void *args);
int handle_nvmlDeviceGetBrand(void *args);
int handle_nvmlDeviceGetIndex(void *args);
int handle_nvmlDeviceGetSerial(void *args);
int handle_nvmlDeviceGetMemoryAffinity(void *args);
int handle_nvmlDeviceGetCpuAffinityWithinScope(void *args);
int handle_nvmlDeviceGetCpuAffinity(void *args);
int handle_nvmlDeviceSetCpuAffinity(void *args);
int handle_nvmlDeviceClearCpuAffinity(void *args);
int handle_nvmlDeviceGetTopologyCommonAncestor(void *args);
int handle_nvmlDeviceGetTopologyNearestGpus(void *args);
int handle_nvmlSystemGetTopologyGpuSet(void *args);
int handle_nvmlDeviceGetP2PStatus(void *args);
int handle_nvmlDeviceGetUUID(void *args);
int handle_nvmlVgpuInstanceGetMdevUUID(void *args);
int handle_nvmlDeviceGetMinorNumber(void *args);
int handle_nvmlDeviceGetBoardPartNumber(void *args);
int handle_nvmlDeviceGetInforomVersion(void *args);
int handle_nvmlDeviceGetInforomImageVersion(void *args);
int handle_nvmlDeviceGetInforomConfigurationChecksum(void *args);
int handle_nvmlDeviceValidateInforom(void *args);
int handle_nvmlDeviceGetDisplayMode(void *args);
int handle_nvmlDeviceGetDisplayActive(void *args);
int handle_nvmlDeviceGetPersistenceMode(void *args);
int handle_nvmlDeviceGetPciInfo_v3(void *args);
int handle_nvmlDeviceGetMaxPcieLinkGeneration(void *args);
int handle_nvmlDeviceGetMaxPcieLinkWidth(void *args);
int handle_nvmlDeviceGetCurrPcieLinkGeneration(void *args);
int handle_nvmlDeviceGetCurrPcieLinkWidth(void *args);
int handle_nvmlDeviceGetPcieThroughput(void *args);
int handle_nvmlDeviceGetPcieReplayCounter(void *args);
int handle_nvmlDeviceGetClockInfo(void *args);
int handle_nvmlDeviceGetMaxClockInfo(void *args);
int handle_nvmlDeviceGetApplicationsClock(void *args);
int handle_nvmlDeviceGetDefaultApplicationsClock(void *args);
int handle_nvmlDeviceResetApplicationsClocks(void *args);
int handle_nvmlDeviceGetClock(void *args);
int handle_nvmlDeviceGetMaxCustomerBoostClock(void *args);
int handle_nvmlDeviceGetSupportedMemoryClocks(void *args);
int handle_nvmlDeviceGetSupportedGraphicsClocks(void *args);
int handle_nvmlDeviceGetAutoBoostedClocksEnabled(void *args);
int handle_nvmlDeviceSetAutoBoostedClocksEnabled(void *args);
int handle_nvmlDeviceSetDefaultAutoBoostedClocksEnabled(void *args);
int handle_nvmlDeviceGetFanSpeed(void *args);
int handle_nvmlDeviceGetFanSpeed_v2(void *args);
int handle_nvmlDeviceGetTemperature(void *args);
int handle_nvmlDeviceGetTemperatureThreshold(void *args);
int handle_nvmlDeviceSetTemperatureThreshold(void *args);
int handle_nvmlDeviceGetPerformanceState(void *args);
int handle_nvmlDeviceGetCurrentClocksThrottleReasons(void *args);
int handle_nvmlDeviceGetSupportedClocksThrottleReasons(void *args);
int handle_nvmlDeviceGetPowerState(void *args);
int handle_nvmlDeviceGetPowerManagementMode(void *args);
int handle_nvmlDeviceGetPowerManagementLimit(void *args);
int handle_nvmlDeviceGetPowerManagementLimitConstraints(void *args);
int handle_nvmlDeviceGetPowerManagementDefaultLimit(void *args);
int handle_nvmlDeviceGetPowerUsage(void *args);
int handle_nvmlDeviceGetTotalEnergyConsumption(void *args);
int handle_nvmlDeviceGetEnforcedPowerLimit(void *args);
int handle_nvmlDeviceGetGpuOperationMode(void *args);
int handle_nvmlDeviceGetMemoryInfo(void *args);
int handle_nvmlDeviceGetComputeMode(void *args);
int handle_nvmlDeviceGetCudaComputeCapability(void *args);
int handle_nvmlDeviceGetEccMode(void *args);
int handle_nvmlDeviceGetBoardId(void *args);
int handle_nvmlDeviceGetMultiGpuBoard(void *args);
int handle_nvmlDeviceGetTotalEccErrors(void *args);
int handle_nvmlDeviceGetDetailedEccErrors(void *args);
int handle_nvmlDeviceGetMemoryErrorCounter(void *args);
int handle_nvmlDeviceGetUtilizationRates(void *args);
int handle_nvmlDeviceGetEncoderUtilization(void *args);
int handle_nvmlDeviceGetEncoderCapacity(void *args);
int handle_nvmlDeviceGetEncoderStats(void *args);
int handle_nvmlDeviceGetEncoderSessions(void *args);
int handle_nvmlDeviceGetDecoderUtilization(void *args);
int handle_nvmlDeviceGetFBCStats(void *args);
int handle_nvmlDeviceGetFBCSessions(void *args);
int handle_nvmlDeviceGetDriverModel(void *args);
int handle_nvmlDeviceGetVbiosVersion(void *args);
int handle_nvmlDeviceGetBridgeChipInfo(void *args);
int handle_nvmlDeviceGetComputeRunningProcesses_v2(void *args);
int handle_nvmlDeviceGetGraphicsRunningProcesses_v2(void *args);
int handle_nvmlDeviceGetMPSComputeRunningProcesses_v2(void *args);
int handle_nvmlDeviceOnSameBoard(void *args);
int handle_nvmlDeviceGetAPIRestriction(void *args);
int handle_nvmlDeviceGetSamples(void *args);
int handle_nvmlDeviceGetBAR1MemoryInfo(void *args);
int handle_nvmlDeviceGetViolationStatus(void *args);
int handle_nvmlDeviceGetAccountingMode(void *args);
int handle_nvmlDeviceGetAccountingStats(void *args);
int handle_nvmlDeviceGetAccountingPids(void *args);
int handle_nvmlDeviceGetAccountingBufferSize(void *args);
int handle_nvmlDeviceGetRetiredPages(void *args);
int handle_nvmlDeviceGetRetiredPages_v2(void *args);
int handle_nvmlDeviceGetRetiredPagesPendingStatus(void *args);
int handle_nvmlDeviceGetRemappedRows(void *args);
int handle_nvmlDeviceGetRowRemapperHistogram(void *args);
int handle_nvmlDeviceGetArchitecture(void *args);
int handle_nvmlUnitSetLedState(void *args);
int handle_nvmlDeviceSetPersistenceMode(void *args);
int handle_nvmlDeviceSetComputeMode(void *args);
int handle_nvmlDeviceSetEccMode(void *args);
int handle_nvmlDeviceClearEccErrorCounts(void *args);
int handle_nvmlDeviceSetDriverModel(void *args);
int handle_nvmlDeviceSetGpuLockedClocks(void *args);
int handle_nvmlDeviceResetGpuLockedClocks(void *args);
int handle_nvmlDeviceSetMemoryLockedClocks(void *args);
int handle_nvmlDeviceResetMemoryLockedClocks(void *args);
int handle_nvmlDeviceSetApplicationsClocks(void *args);
int handle_nvmlDeviceGetClkMonStatus(void *args);
int handle_nvmlDeviceSetPowerManagementLimit(void *args);
int handle_nvmlDeviceSetGpuOperationMode(void *args);
int handle_nvmlDeviceSetAPIRestriction(void *args);
int handle_nvmlDeviceSetAccountingMode(void *args);
int handle_nvmlDeviceClearAccountingPids(void *args);
int handle_nvmlDeviceGetNvLinkState(void *args);
int handle_nvmlDeviceGetNvLinkVersion(void *args);
int handle_nvmlDeviceGetNvLinkCapability(void *args);
int handle_nvmlDeviceGetNvLinkRemotePciInfo_v2(void *args);
int handle_nvmlDeviceGetNvLinkErrorCounter(void *args);
int handle_nvmlDeviceResetNvLinkErrorCounters(void *args);
int handle_nvmlDeviceSetNvLinkUtilizationControl(void *args);
int handle_nvmlDeviceGetNvLinkUtilizationControl(void *args);
int handle_nvmlDeviceGetNvLinkUtilizationCounter(void *args);
int handle_nvmlDeviceFreezeNvLinkUtilizationCounter(void *args);
int handle_nvmlDeviceResetNvLinkUtilizationCounter(void *args);
int handle_nvmlDeviceGetNvLinkRemoteDeviceType(void *args);
int handle_nvmlEventSetCreate(void *args);
int handle_nvmlDeviceRegisterEvents(void *args);
int handle_nvmlDeviceGetSupportedEventTypes(void *args);
int handle_nvmlEventSetWait_v2(void *args);
int handle_nvmlEventSetFree(void *args);
int handle_nvmlDeviceModifyDrainState(void *args);
int handle_nvmlDeviceQueryDrainState(void *args);
int handle_nvmlDeviceRemoveGpu_v2(void *args);
int handle_nvmlDeviceDiscoverGpus(void *args);
int handle_nvmlDeviceGetFieldValues(void *args);
int handle_nvmlDeviceGetVirtualizationMode(void *args);
int handle_nvmlDeviceGetHostVgpuMode(void *args);
int handle_nvmlDeviceSetVirtualizationMode(void *args);
int handle_nvmlDeviceGetGridLicensableFeatures_v3(void *args);
int handle_nvmlDeviceGetProcessUtilization(void *args);
int handle_nvmlDeviceGetSupportedVgpus(void *args);
int handle_nvmlDeviceGetCreatableVgpus(void *args);
int handle_nvmlVgpuTypeGetClass(void *args);
int handle_nvmlVgpuTypeGetName(void *args);
int handle_nvmlVgpuTypeGetGpuInstanceProfileId(void *args);
int handle_nvmlVgpuTypeGetDeviceID(void *args);
int handle_nvmlVgpuTypeGetFramebufferSize(void *args);
int handle_nvmlVgpuTypeGetNumDisplayHeads(void *args);
int handle_nvmlVgpuTypeGetResolution(void *args);
int handle_nvmlVgpuTypeGetLicense(void *args);
int handle_nvmlVgpuTypeGetFrameRateLimit(void *args);
int handle_nvmlVgpuTypeGetMaxInstances(void *args);
int handle_nvmlVgpuTypeGetMaxInstancesPerVm(void *args);
int handle_nvmlDeviceGetActiveVgpus(void *args);
int handle_nvmlVgpuInstanceGetVmID(void *args);
int handle_nvmlVgpuInstanceGetUUID(void *args);
int handle_nvmlVgpuInstanceGetVmDriverVersion(void *args);
int handle_nvmlVgpuInstanceGetFbUsage(void *args);
int handle_nvmlVgpuInstanceGetLicenseStatus(void *args);
int handle_nvmlVgpuInstanceGetType(void *args);
int handle_nvmlVgpuInstanceGetFrameRateLimit(void *args);
int handle_nvmlVgpuInstanceGetEccMode(void *args);
int handle_nvmlVgpuInstanceGetEncoderCapacity(void *args);
int handle_nvmlVgpuInstanceSetEncoderCapacity(void *args);
int handle_nvmlVgpuInstanceGetEncoderStats(void *args);
int handle_nvmlVgpuInstanceGetEncoderSessions(void *args);
int handle_nvmlVgpuInstanceGetFBCStats(void *args);
int handle_nvmlVgpuInstanceGetFBCSessions(void *args);
int handle_nvmlVgpuInstanceGetGpuInstanceId(void *args);
int handle_nvmlVgpuInstanceGetMetadata(void *args);
int handle_nvmlDeviceGetVgpuMetadata(void *args);
int handle_nvmlGetVgpuCompatibility(void *args);
int handle_nvmlDeviceGetPgpuMetadataString(void *args);
int handle_nvmlGetVgpuVersion(void *args);
int handle_nvmlSetVgpuVersion(void *args);
int handle_nvmlDeviceGetVgpuUtilization(void *args);
int handle_nvmlDeviceGetVgpuProcessUtilization(void *args);
int handle_nvmlVgpuInstanceGetAccountingMode(void *args);
int handle_nvmlVgpuInstanceGetAccountingPids(void *args);
int handle_nvmlVgpuInstanceGetAccountingStats(void *args);
int handle_nvmlVgpuInstanceClearAccountingPids(void *args);
int handle_nvmlGetExcludedDeviceCount(void *args);
int handle_nvmlGetExcludedDeviceInfoByIndex(void *args);
int handle_nvmlDeviceSetMigMode(void *args);
int handle_nvmlDeviceGetMigMode(void *args);
int handle_nvmlDeviceGetGpuInstanceProfileInfo(void *args);
int handle_nvmlDeviceGetGpuInstancePossiblePlacements_v2(void *args);
int handle_nvmlDeviceGetGpuInstanceRemainingCapacity(void *args);
int handle_nvmlDeviceCreateGpuInstance(void *args);
int handle_nvmlDeviceCreateGpuInstanceWithPlacement(void *args);
int handle_nvmlGpuInstanceDestroy(void *args);
int handle_nvmlDeviceGetGpuInstances(void *args);
int handle_nvmlDeviceGetGpuInstanceById(void *args);
int handle_nvmlGpuInstanceGetInfo(void *args);
int handle_nvmlGpuInstanceGetComputeInstanceProfileInfo(void *args);
int handle_nvmlGpuInstanceGetComputeInstanceRemainingCapacity(void *args);
int handle_nvmlGpuInstanceCreateComputeInstance(void *args);
int handle_nvmlComputeInstanceDestroy(void *args);
int handle_nvmlGpuInstanceGetComputeInstances(void *args);
int handle_nvmlGpuInstanceGetComputeInstanceById(void *args);
int handle_nvmlComputeInstanceGetInfo_v2(void *args);
int handle_nvmlDeviceIsMigDeviceHandle(void *args);
int handle_nvmlDeviceGetGpuInstanceId(void *args);
int handle_nvmlDeviceGetComputeInstanceId(void *args);
int handle_nvmlDeviceGetMaxMigDeviceCount(void *args);
int handle_nvmlDeviceGetMigDeviceHandleByIndex(void *args);
int handle_nvmlDeviceGetDeviceHandleFromMigDeviceHandle(void *args);
int handle_cudaDeviceReset(void *args);
int handle_cudaDeviceSynchronize(void *args);
int handle_cudaDeviceSetLimit(void *args);
int handle_cudaDeviceGetLimit(void *args);
int handle_cudaDeviceGetTexture1DLinearMaxWidth(void *args);
int handle_cudaDeviceGetCacheConfig(void *args);
int handle_cudaDeviceGetStreamPriorityRange(void *args);
int handle_cudaDeviceSetCacheConfig(void *args);
int handle_cudaDeviceGetSharedMemConfig(void *args);
int handle_cudaDeviceSetSharedMemConfig(void *args);
int handle_cudaDeviceGetByPCIBusId(void *args);
int handle_cudaDeviceGetPCIBusId(void *args);
int handle_cudaIpcGetEventHandle(void *args);
int handle_cudaIpcOpenEventHandle(void *args);
int handle_cudaIpcGetMemHandle(void *args);
int handle_cudaIpcOpenMemHandle(void *args);
int handle_cudaIpcCloseMemHandle(void *args);
int handle_cudaDeviceFlushGPUDirectRDMAWrites(void *args);
int handle_cudaThreadExit(void *args);
int handle_cudaThreadSynchronize(void *args);
int handle_cudaThreadSetLimit(void *args);
int handle_cudaThreadGetLimit(void *args);
int handle_cudaThreadGetCacheConfig(void *args);
int handle_cudaThreadSetCacheConfig(void *args);
int handle_cudaGetLastError(void *args);
int handle_cudaPeekAtLastError(void *args);
int handle_cudaGetErrorName(void *args);
int handle_cudaGetErrorString(void *args);
int handle_cudaGetDeviceCount(void *args);
int handle_cudaGetDeviceProperties(void *args);
int handle_cudaDeviceGetAttribute(void *args);
int handle_cudaDeviceGetDefaultMemPool(void *args);
int handle_cudaDeviceSetMemPool(void *args);
int handle_cudaDeviceGetMemPool(void *args);
int handle_cudaDeviceGetNvSciSyncAttributes(void *args);
int handle_cudaDeviceGetP2PAttribute(void *args);
int handle_cudaChooseDevice(void *args);
int handle_cudaSetDevice(void *args);
int handle_cudaGetDevice(void *args);
int handle_cudaSetValidDevices(void *args);
int handle_cudaSetDeviceFlags(void *args);
int handle_cudaGetDeviceFlags(void *args);
int handle_cudaStreamCreate(void *args);
int handle_cudaStreamCreateWithFlags(void *args);
int handle_cudaStreamCreateWithPriority(void *args);
int handle_cudaStreamGetPriority(void *args);
int handle_cudaStreamGetFlags(void *args);
int handle_cudaCtxResetPersistingL2Cache(void *args);
int handle_cudaStreamCopyAttributes(void *args);
int handle_cudaStreamGetAttribute(void *args);
int handle_cudaStreamSetAttribute(void *args);
int handle_cudaStreamDestroy(void *args);
int handle_cudaStreamWaitEvent(void *args);
int handle_cudaStreamAddCallback(void *args);
int handle_cudaStreamSynchronize(void *args);
int handle_cudaStreamQuery(void *args);
int handle_cudaStreamAttachMemAsync(void *args);
int handle_cudaStreamBeginCapture(void *args);
int handle_cudaThreadExchangeStreamCaptureMode(void *args);
int handle_cudaStreamEndCapture(void *args);
int handle_cudaStreamIsCapturing(void *args);
int handle_cudaStreamGetCaptureInfo(void *args);
int handle_cudaStreamGetCaptureInfo_v2(void *args);
int handle_cudaStreamUpdateCaptureDependencies(void *args);
int handle_cudaEventCreate(void *args);
int handle_cudaEventCreateWithFlags(void *args);
int handle_cudaEventRecord(void *args);
int handle_cudaEventRecordWithFlags(void *args);
int handle_cudaEventQuery(void *args);
int handle_cudaEventSynchronize(void *args);
int handle_cudaEventDestroy(void *args);
int handle_cudaEventElapsedTime(void *args);
int handle_cudaImportExternalMemory(void *args);
int handle_cudaExternalMemoryGetMappedBuffer(void *args);
int handle_cudaExternalMemoryGetMappedMipmappedArray(void *args);
int handle_cudaDestroyExternalMemory(void *args);
int handle_cudaImportExternalSemaphore(void *args);
int handle_cudaSignalExternalSemaphoresAsync_v2(void *args);
int handle_cudaWaitExternalSemaphoresAsync_v2(void *args);
int handle_cudaDestroyExternalSemaphore(void *args);
int handle_cudaLaunchKernel(void *args);
int handle_cudaLaunchCooperativeKernel(void *args);
int handle_cudaLaunchCooperativeKernelMultiDevice(void *args);
int handle_cudaFuncSetCacheConfig(void *args);
int handle_cudaFuncSetSharedMemConfig(void *args);
int handle_cudaFuncGetAttributes(void *args);
int handle_cudaFuncSetAttribute(void *args);
int handle_cudaSetDoubleForDevice(void *args);
int handle_cudaSetDoubleForHost(void *args);
int handle_cudaLaunchHostFunc(void *args);
int handle_cudaOccupancyMaxActiveBlocksPerMultiprocessor(void *args);
int handle_cudaOccupancyAvailableDynamicSMemPerBlock(void *args);
int handle_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(void *args);
int handle_cudaMallocManaged(void *args);
int handle_cudaMalloc(void *args);
int handle_cudaMallocHost(void *args);
int handle_cudaMallocPitch(void *args);
int handle_cudaMallocArray(void *args);
int handle_cudaFree(void *args);
int handle_cudaFreeHost(void *args);
int handle_cudaFreeArray(void *args);
int handle_cudaFreeMipmappedArray(void *args);
int handle_cudaHostAlloc(void *args);
int handle_cudaHostRegister(void *args);
int handle_cudaHostUnregister(void *args);
int handle_cudaHostGetDevicePointer(void *args);
int handle_cudaHostGetFlags(void *args);
int handle_cudaMalloc3D(void *args);
int handle_cudaMalloc3DArray(void *args);
int handle_cudaMallocMipmappedArray(void *args);
int handle_cudaGetMipmappedArrayLevel(void *args);
int handle_cudaMemcpy3D(void *args);
int handle_cudaMemcpy3DPeer(void *args);
int handle_cudaMemcpy3DAsync(void *args);
int handle_cudaMemcpy3DPeerAsync(void *args);
int handle_cudaMemGetInfo(void *args);
int handle_cudaArrayGetInfo(void *args);
int handle_cudaArrayGetPlane(void *args);
int handle_cudaArrayGetSparseProperties(void *args);
int handle_cudaMipmappedArrayGetSparseProperties(void *args);
int handle_cudaMemcpy(void *args);
int handle_cudaMemcpyPeer(void *args);
int handle_cudaMemcpy2D(void *args);
int handle_cudaMemcpy2DToArray(void *args);
int handle_cudaMemcpy2DFromArray(void *args);
int handle_cudaMemcpy2DArrayToArray(void *args);
int handle_cudaMemcpyToSymbol(void *args);
int handle_cudaMemcpyFromSymbol(void *args);
int handle_cudaMemcpyAsync(void *args);
int handle_cudaMemcpyPeerAsync(void *args);
int handle_cudaMemcpy2DAsync(void *args);
int handle_cudaMemcpy2DToArrayAsync(void *args);
int handle_cudaMemcpy2DFromArrayAsync(void *args);
int handle_cudaMemcpyToSymbolAsync(void *args);
int handle_cudaMemcpyFromSymbolAsync(void *args);
int handle_cudaMemset(void *args);
int handle_cudaMemset2D(void *args);
int handle_cudaMemset3D(void *args);
int handle_cudaMemsetAsync(void *args);
int handle_cudaMemset2DAsync(void *args);
int handle_cudaMemset3DAsync(void *args);
int handle_cudaGetSymbolAddress(void *args);
int handle_cudaGetSymbolSize(void *args);
int handle_cudaMemPrefetchAsync(void *args);
int handle_cudaMemAdvise(void *args);
int handle_cudaMemRangeGetAttribute(void *args);
int handle_cudaMemRangeGetAttributes(void *args);
int handle_cudaMemcpyToArray(void *args);
int handle_cudaMemcpyFromArray(void *args);
int handle_cudaMemcpyArrayToArray(void *args);
int handle_cudaMemcpyToArrayAsync(void *args);
int handle_cudaMemcpyFromArrayAsync(void *args);
int handle_cudaMallocAsync(void *args);
int handle_cudaFreeAsync(void *args);
int handle_cudaMemPoolTrimTo(void *args);
int handle_cudaMemPoolSetAttribute(void *args);
int handle_cudaMemPoolGetAttribute(void *args);
int handle_cudaMemPoolSetAccess(void *args);
int handle_cudaMemPoolGetAccess(void *args);
int handle_cudaMemPoolCreate(void *args);
int handle_cudaMemPoolDestroy(void *args);
int handle_cudaMallocFromPoolAsync(void *args);
int handle_cudaMemPoolExportToShareableHandle(void *args);
int handle_cudaMemPoolImportFromShareableHandle(void *args);
int handle_cudaMemPoolExportPointer(void *args);
int handle_cudaMemPoolImportPointer(void *args);
int handle_cudaPointerGetAttributes(void *args);
int handle_cudaDeviceCanAccessPeer(void *args);
int handle_cudaDeviceEnablePeerAccess(void *args);
int handle_cudaDeviceDisablePeerAccess(void *args);
int handle_cudaGraphicsUnregisterResource(void *args);
int handle_cudaGraphicsResourceSetMapFlags(void *args);
int handle_cudaGraphicsMapResources(void *args);
int handle_cudaGraphicsUnmapResources(void *args);
int handle_cudaGraphicsResourceGetMappedPointer(void *args);
int handle_cudaGraphicsSubResourceGetMappedArray(void *args);
int handle_cudaGraphicsResourceGetMappedMipmappedArray(void *args);
int handle_cudaBindTexture(void *args);
int handle_cudaBindTexture2D(void *args);
int handle_cudaBindTextureToArray(void *args);
int handle_cudaBindTextureToMipmappedArray(void *args);
int handle_cudaUnbindTexture(void *args);
int handle_cudaGetTextureAlignmentOffset(void *args);
int handle_cudaGetTextureReference(void *args);
int handle_cudaBindSurfaceToArray(void *args);
int handle_cudaGetSurfaceReference(void *args);
int handle_cudaGetChannelDesc(void *args);
int handle_cudaCreateChannelDesc(void *args);
int handle_cudaCreateTextureObject(void *args);
int handle_cudaDestroyTextureObject(void *args);
int handle_cudaGetTextureObjectResourceDesc(void *args);
int handle_cudaGetTextureObjectTextureDesc(void *args);
int handle_cudaGetTextureObjectResourceViewDesc(void *args);
int handle_cudaCreateSurfaceObject(void *args);
int handle_cudaDestroySurfaceObject(void *args);
int handle_cudaGetSurfaceObjectResourceDesc(void *args);
int handle_cudaDriverGetVersion(void *args);
int handle_cudaRuntimeGetVersion(void *args);
int handle_cudaGraphCreate(void *args);
int handle_cudaGraphAddKernelNode(void *args);
int handle_cudaGraphKernelNodeGetParams(void *args);
int handle_cudaGraphKernelNodeSetParams(void *args);
int handle_cudaGraphKernelNodeCopyAttributes(void *args);
int handle_cudaGraphKernelNodeGetAttribute(void *args);
int handle_cudaGraphKernelNodeSetAttribute(void *args);
int handle_cudaGraphAddMemcpyNode(void *args);
int handle_cudaGraphAddMemcpyNodeToSymbol(void *args);
int handle_cudaGraphAddMemcpyNodeFromSymbol(void *args);
int handle_cudaGraphAddMemcpyNode1D(void *args);
int handle_cudaGraphMemcpyNodeGetParams(void *args);
int handle_cudaGraphMemcpyNodeSetParams(void *args);
int handle_cudaGraphMemcpyNodeSetParamsToSymbol(void *args);
int handle_cudaGraphMemcpyNodeSetParamsFromSymbol(void *args);
int handle_cudaGraphMemcpyNodeSetParams1D(void *args);
int handle_cudaGraphAddMemsetNode(void *args);
int handle_cudaGraphMemsetNodeGetParams(void *args);
int handle_cudaGraphMemsetNodeSetParams(void *args);
int handle_cudaGraphAddHostNode(void *args);
int handle_cudaGraphHostNodeGetParams(void *args);
int handle_cudaGraphHostNodeSetParams(void *args);
int handle_cudaGraphAddChildGraphNode(void *args);
int handle_cudaGraphChildGraphNodeGetGraph(void *args);
int handle_cudaGraphAddEmptyNode(void *args);
int handle_cudaGraphAddEventRecordNode(void *args);
int handle_cudaGraphEventRecordNodeGetEvent(void *args);
int handle_cudaGraphEventRecordNodeSetEvent(void *args);
int handle_cudaGraphAddEventWaitNode(void *args);
int handle_cudaGraphEventWaitNodeGetEvent(void *args);
int handle_cudaGraphEventWaitNodeSetEvent(void *args);
int handle_cudaGraphAddExternalSemaphoresSignalNode(void *args);
int handle_cudaGraphExternalSemaphoresSignalNodeGetParams(void *args);
int handle_cudaGraphExternalSemaphoresSignalNodeSetParams(void *args);
int handle_cudaGraphAddExternalSemaphoresWaitNode(void *args);
int handle_cudaGraphExternalSemaphoresWaitNodeGetParams(void *args);
int handle_cudaGraphExternalSemaphoresWaitNodeSetParams(void *args);
int handle_cudaGraphAddMemAllocNode(void *args);
int handle_cudaGraphMemAllocNodeGetParams(void *args);
int handle_cudaGraphAddMemFreeNode(void *args);
int handle_cudaGraphMemFreeNodeGetParams(void *args);
int handle_cudaDeviceGraphMemTrim(void *args);
int handle_cudaDeviceGetGraphMemAttribute(void *args);
int handle_cudaDeviceSetGraphMemAttribute(void *args);
int handle_cudaGraphClone(void *args);
int handle_cudaGraphNodeFindInClone(void *args);
int handle_cudaGraphNodeGetType(void *args);
int handle_cudaGraphGetNodes(void *args);
int handle_cudaGraphGetRootNodes(void *args);
int handle_cudaGraphGetEdges(void *args);
int handle_cudaGraphNodeGetDependencies(void *args);
int handle_cudaGraphNodeGetDependentNodes(void *args);
int handle_cudaGraphAddDependencies(void *args);
int handle_cudaGraphRemoveDependencies(void *args);
int handle_cudaGraphDestroyNode(void *args);
int handle_cudaGraphInstantiate(void *args);
int handle_cudaGraphInstantiateWithFlags(void *args);
int handle_cudaGraphExecKernelNodeSetParams(void *args);
int handle_cudaGraphExecMemcpyNodeSetParams(void *args);
int handle_cudaGraphExecMemcpyNodeSetParamsToSymbol(void *args);
int handle_cudaGraphExecMemcpyNodeSetParamsFromSymbol(void *args);
int handle_cudaGraphExecMemcpyNodeSetParams1D(void *args);
int handle_cudaGraphExecMemsetNodeSetParams(void *args);
int handle_cudaGraphExecHostNodeSetParams(void *args);
int handle_cudaGraphExecChildGraphNodeSetParams(void *args);
int handle_cudaGraphExecEventRecordNodeSetEvent(void *args);
int handle_cudaGraphExecEventWaitNodeSetEvent(void *args);
int handle_cudaGraphExecExternalSemaphoresSignalNodeSetParams(void *args);
int handle_cudaGraphExecExternalSemaphoresWaitNodeSetParams(void *args);
int handle_cudaGraphExecUpdate(void *args);
int handle_cudaGraphUpload(void *args);
int handle_cudaGraphLaunch(void *args);
int handle_cudaGraphExecDestroy(void *args);
int handle_cudaGraphDestroy(void *args);
int handle_cudaGraphDebugDotPrint(void *args);
int handle_cudaUserObjectCreate(void *args);
int handle_cudaUserObjectRetain(void *args);
int handle_cudaUserObjectRelease(void *args);
int handle_cudaGraphRetainUserObject(void *args);
int handle_cudaGraphReleaseUserObject(void *args);
int handle_cudaGetDriverEntryPoint(void *args);
int handle_cudaGetExportTable(void *args);
int handle_cudaGetFuncBySymbol(void *args);
int handle_cublasCreate_v2(void *args);
int handle_cublasDestroy_v2(void *args);
int handle_cublasGetVersion_v2(void *args);
int handle_cublasGetProperty(void *args);
int handle_cublasGetCudartVersion(void *args);
int handle_cublasSetWorkspace_v2(void *args);
int handle_cublasSetStream_v2(void *args);
int handle_cublasGetStream_v2(void *args);
int handle_cublasGetPointerMode_v2(void *args);
int handle_cublasSetPointerMode_v2(void *args);
int handle_cublasGetAtomicsMode(void *args);
int handle_cublasSetAtomicsMode(void *args);
int handle_cublasGetMathMode(void *args);
int handle_cublasSetMathMode(void *args);
int handle_cublasGetSmCountTarget(void *args);
int handle_cublasSetSmCountTarget(void *args);
int handle_cublasLoggerConfigure(void *args);
int handle_cublasSetLoggerCallback(void *args);
int handle_cublasGetLoggerCallback(void *args);
int handle_cublasSetVector(void *args);
int handle_cublasGetVector(void *args);
int handle_cublasSetMatrix(void *args);
int handle_cublasGetMatrix(void *args);
int handle_cublasSetVectorAsync(void *args);
int handle_cublasGetVectorAsync(void *args);
int handle_cublasSetMatrixAsync(void *args);
int handle_cublasGetMatrixAsync(void *args);
int handle_cublasXerbla(void *args);
int handle_cublasNrm2Ex(void *args);
int handle_cublasSnrm2_v2(void *args);
int handle_cublasDnrm2_v2(void *args);
int handle_cublasScnrm2_v2(void *args);
int handle_cublasDznrm2_v2(void *args);
int handle_cublasDotEx(void *args);
int handle_cublasDotcEx(void *args);
int handle_cublasSdot_v2(void *args);
int handle_cublasDdot_v2(void *args);
int handle_cublasCdotu_v2(void *args);
int handle_cublasCdotc_v2(void *args);
int handle_cublasZdotu_v2(void *args);
int handle_cublasZdotc_v2(void *args);
int handle_cublasScalEx(void *args);
int handle_cublasSscal_v2(void *args);
int handle_cublasDscal_v2(void *args);
int handle_cublasCscal_v2(void *args);
int handle_cublasCsscal_v2(void *args);
int handle_cublasZscal_v2(void *args);
int handle_cublasZdscal_v2(void *args);
int handle_cublasAxpyEx(void *args);
int handle_cublasSaxpy_v2(void *args);
int handle_cublasDaxpy_v2(void *args);
int handle_cublasCaxpy_v2(void *args);
int handle_cublasZaxpy_v2(void *args);
int handle_cublasCopyEx(void *args);
int handle_cublasScopy_v2(void *args);
int handle_cublasDcopy_v2(void *args);
int handle_cublasCcopy_v2(void *args);
int handle_cublasZcopy_v2(void *args);
int handle_cublasSswap_v2(void *args);
int handle_cublasDswap_v2(void *args);
int handle_cublasCswap_v2(void *args);
int handle_cublasZswap_v2(void *args);
int handle_cublasSwapEx(void *args);
int handle_cublasIsamax_v2(void *args);
int handle_cublasIdamax_v2(void *args);
int handle_cublasIcamax_v2(void *args);
int handle_cublasIzamax_v2(void *args);
int handle_cublasIamaxEx(void *args);
int handle_cublasIsamin_v2(void *args);
int handle_cublasIdamin_v2(void *args);
int handle_cublasIcamin_v2(void *args);
int handle_cublasIzamin_v2(void *args);
int handle_cublasIaminEx(void *args);
int handle_cublasAsumEx(void *args);
int handle_cublasSasum_v2(void *args);
int handle_cublasDasum_v2(void *args);
int handle_cublasScasum_v2(void *args);
int handle_cublasDzasum_v2(void *args);
int handle_cublasSrot_v2(void *args);
int handle_cublasDrot_v2(void *args);
int handle_cublasCrot_v2(void *args);
int handle_cublasCsrot_v2(void *args);
int handle_cublasZrot_v2(void *args);
int handle_cublasZdrot_v2(void *args);
int handle_cublasRotEx(void *args);
int handle_cublasSrotg_v2(void *args);
int handle_cublasDrotg_v2(void *args);
int handle_cublasCrotg_v2(void *args);
int handle_cublasZrotg_v2(void *args);
int handle_cublasRotgEx(void *args);
int handle_cublasSrotm_v2(void *args);
int handle_cublasDrotm_v2(void *args);
int handle_cublasRotmEx(void *args);
int handle_cublasSrotmg_v2(void *args);
int handle_cublasDrotmg_v2(void *args);
int handle_cublasRotmgEx(void *args);
int handle_cublasSgemv_v2(void *args);
int handle_cublasDgemv_v2(void *args);
int handle_cublasCgemv_v2(void *args);
int handle_cublasZgemv_v2(void *args);
int handle_cublasSgbmv_v2(void *args);
int handle_cublasDgbmv_v2(void *args);
int handle_cublasCgbmv_v2(void *args);
int handle_cublasZgbmv_v2(void *args);
int handle_cublasStrmv_v2(void *args);
int handle_cublasDtrmv_v2(void *args);
int handle_cublasCtrmv_v2(void *args);
int handle_cublasZtrmv_v2(void *args);
int handle_cublasStbmv_v2(void *args);
int handle_cublasDtbmv_v2(void *args);
int handle_cublasCtbmv_v2(void *args);
int handle_cublasZtbmv_v2(void *args);
int handle_cublasStpmv_v2(void *args);
int handle_cublasDtpmv_v2(void *args);
int handle_cublasCtpmv_v2(void *args);
int handle_cublasZtpmv_v2(void *args);
int handle_cublasStrsv_v2(void *args);
int handle_cublasDtrsv_v2(void *args);
int handle_cublasCtrsv_v2(void *args);
int handle_cublasZtrsv_v2(void *args);
int handle_cublasStpsv_v2(void *args);
int handle_cublasDtpsv_v2(void *args);
int handle_cublasCtpsv_v2(void *args);
int handle_cublasZtpsv_v2(void *args);
int handle_cublasStbsv_v2(void *args);
int handle_cublasDtbsv_v2(void *args);
int handle_cublasCtbsv_v2(void *args);
int handle_cublasZtbsv_v2(void *args);
int handle_cublasSsymv_v2(void *args);
int handle_cublasDsymv_v2(void *args);
int handle_cublasCsymv_v2(void *args);
int handle_cublasZsymv_v2(void *args);
int handle_cublasChemv_v2(void *args);
int handle_cublasZhemv_v2(void *args);
int handle_cublasSsbmv_v2(void *args);
int handle_cublasDsbmv_v2(void *args);
int handle_cublasChbmv_v2(void *args);
int handle_cublasZhbmv_v2(void *args);
int handle_cublasSspmv_v2(void *args);
int handle_cublasDspmv_v2(void *args);
int handle_cublasChpmv_v2(void *args);
int handle_cublasZhpmv_v2(void *args);
int handle_cublasSger_v2(void *args);
int handle_cublasDger_v2(void *args);
int handle_cublasCgeru_v2(void *args);
int handle_cublasCgerc_v2(void *args);
int handle_cublasZgeru_v2(void *args);
int handle_cublasZgerc_v2(void *args);
int handle_cublasSsyr_v2(void *args);
int handle_cublasDsyr_v2(void *args);
int handle_cublasCsyr_v2(void *args);
int handle_cublasZsyr_v2(void *args);
int handle_cublasCher_v2(void *args);
int handle_cublasZher_v2(void *args);
int handle_cublasSspr_v2(void *args);
int handle_cublasDspr_v2(void *args);
int handle_cublasChpr_v2(void *args);
int handle_cublasZhpr_v2(void *args);
int handle_cublasSsyr2_v2(void *args);
int handle_cublasDsyr2_v2(void *args);
int handle_cublasCsyr2_v2(void *args);
int handle_cublasZsyr2_v2(void *args);
int handle_cublasCher2_v2(void *args);
int handle_cublasZher2_v2(void *args);
int handle_cublasSspr2_v2(void *args);
int handle_cublasDspr2_v2(void *args);
int handle_cublasChpr2_v2(void *args);
int handle_cublasZhpr2_v2(void *args);
int handle_cublasSgemm_v2(void *args);
int handle_cublasDgemm_v2(void *args);
int handle_cublasCgemm_v2(void *args);
int handle_cublasCgemm3m(void *args);
int handle_cublasCgemm3mEx(void *args);
int handle_cublasZgemm_v2(void *args);
int handle_cublasZgemm3m(void *args);
int handle_cublasHgemm(void *args);
int handle_cublasSgemmEx(void *args);
int handle_cublasCgemmEx(void *args);
int handle_cublasUint8gemmBias(void *args);
int handle_cublasSsyrk_v2(void *args);
int handle_cublasDsyrk_v2(void *args);
int handle_cublasCsyrk_v2(void *args);
int handle_cublasZsyrk_v2(void *args);
int handle_cublasCsyrkEx(void *args);
int handle_cublasCsyrk3mEx(void *args);
int handle_cublasCherk_v2(void *args);
int handle_cublasZherk_v2(void *args);
int handle_cublasCherkEx(void *args);
int handle_cublasCherk3mEx(void *args);
int handle_cublasSsyr2k_v2(void *args);
int handle_cublasDsyr2k_v2(void *args);
int handle_cublasCsyr2k_v2(void *args);
int handle_cublasZsyr2k_v2(void *args);
int handle_cublasCher2k_v2(void *args);
int handle_cublasZher2k_v2(void *args);
int handle_cublasSsyrkx(void *args);
int handle_cublasDsyrkx(void *args);
int handle_cublasCsyrkx(void *args);
int handle_cublasZsyrkx(void *args);
int handle_cublasCherkx(void *args);
int handle_cublasZherkx(void *args);
int handle_cublasSsymm_v2(void *args);
int handle_cublasDsymm_v2(void *args);
int handle_cublasCsymm_v2(void *args);
int handle_cublasZsymm_v2(void *args);
int handle_cublasChemm_v2(void *args);
int handle_cublasZhemm_v2(void *args);
int handle_cublasStrsm_v2(void *args);
int handle_cublasDtrsm_v2(void *args);
int handle_cublasCtrsm_v2(void *args);
int handle_cublasZtrsm_v2(void *args);
int handle_cublasStrmm_v2(void *args);
int handle_cublasDtrmm_v2(void *args);
int handle_cublasCtrmm_v2(void *args);
int handle_cublasZtrmm_v2(void *args);
int handle_cublasHgemmBatched(void *args);
int handle_cublasSgemmBatched(void *args);
int handle_cublasDgemmBatched(void *args);
int handle_cublasCgemmBatched(void *args);
int handle_cublasCgemm3mBatched(void *args);
int handle_cublasZgemmBatched(void *args);
int handle_cublasSgemmStridedBatched(void *args);
int handle_cublasDgemmStridedBatched(void *args);
int handle_cublasCgemmStridedBatched(void *args);
int handle_cublasCgemm3mStridedBatched(void *args);
int handle_cublasZgemmStridedBatched(void *args);
int handle_cublasHgemmStridedBatched(void *args);
int handle_cublasSgeam(void *args);
int handle_cublasDgeam(void *args);
int handle_cublasCgeam(void *args);
int handle_cublasZgeam(void *args);
int handle_cublasSgetrfBatched(void *args);
int handle_cublasDgetrfBatched(void *args);
int handle_cublasCgetrfBatched(void *args);
int handle_cublasZgetrfBatched(void *args);
int handle_cublasSgetriBatched(void *args);
int handle_cublasDgetriBatched(void *args);
int handle_cublasCgetriBatched(void *args);
int handle_cublasZgetriBatched(void *args);
int handle_cublasSgetrsBatched(void *args);
int handle_cublasDgetrsBatched(void *args);
int handle_cublasCgetrsBatched(void *args);
int handle_cublasZgetrsBatched(void *args);
int handle_cublasStrsmBatched(void *args);
int handle_cublasDtrsmBatched(void *args);
int handle_cublasCtrsmBatched(void *args);
int handle_cublasZtrsmBatched(void *args);
int handle_cublasSmatinvBatched(void *args);
int handle_cublasDmatinvBatched(void *args);
int handle_cublasCmatinvBatched(void *args);
int handle_cublasZmatinvBatched(void *args);
int handle_cublasSgeqrfBatched(void *args);
int handle_cublasDgeqrfBatched(void *args);
int handle_cublasCgeqrfBatched(void *args);
int handle_cublasZgeqrfBatched(void *args);
int handle_cublasSgelsBatched(void *args);
int handle_cublasDgelsBatched(void *args);
int handle_cublasCgelsBatched(void *args);
int handle_cublasZgelsBatched(void *args);
int handle_cublasSdgmm(void *args);
int handle_cublasDdgmm(void *args);
int handle_cublasCdgmm(void *args);
int handle_cublasZdgmm(void *args);
int handle_cublasStpttr(void *args);
int handle_cublasDtpttr(void *args);
int handle_cublasCtpttr(void *args);
int handle_cublasZtpttr(void *args);
int handle_cublasStrttp(void *args);
int handle_cublasDtrttp(void *args);
int handle_cublasCtrttp(void *args);
int handle_cublasZtrttp(void *args);
#endif // HOOK_SERVER_H
